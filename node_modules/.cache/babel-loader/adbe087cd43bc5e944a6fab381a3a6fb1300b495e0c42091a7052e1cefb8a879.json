{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:8080/api';\n\n// Mock data for development\nconst MOCK_TESTIMONIALS = [{\n  id: 1,\n  nameKey: 'testimonial1Name',\n  deviceKey: 'testimonial1Device',\n  quoteKey: 'testimonial1Quote',\n  avatar: 'https://placehold.co/100x100/3B82F6/FFFFFF?text=User1',\n  rating: 5\n}, {\n  id: 2,\n  nameKey: 'testimonial2Name',\n  deviceKey: 'testimonial2Device',\n  quoteKey: 'testimonial2Quote',\n  avatar: 'https://placehold.co/100x100/3B82F6/FFFFFF?text=User2',\n  rating: 5\n}, {\n  id: 3,\n  nameKey: 'testimonial3Name',\n  deviceKey: 'testimonial3Device',\n  quoteKey: 'testimonial3Quote',\n  avatar: 'https://placehold.co/100x100/3B82F6/FFFFFF?text=User3',\n  rating: 5\n}];\nconst MOCK_BEFORE_AFTER_CASES = [{\n  id: 'ba1',\n  beforeTitleKey: 'beforeTitle',\n  beforeDescriptionKey: 'beforeDescription1',\n  beforeImageAltKey: 'beforeImageAlt1',\n  beforeImage: 'https://placehold.co/600x400/FF7272/FFFFFF?text=Damaged+Screen&font=roboto',\n  afterTitleKey: 'afterTitle',\n  afterDescriptionKey: 'afterDescription1',\n  afterImageAltKey: 'afterImageAlt1',\n  afterImage: 'https://placehold.co/600x400/72FFB3/FFFFFF?text=Screen+Data+Recovered!&font=roboto'\n}, {\n  id: 'ba2',\n  beforeTitleKey: 'beforeTitle',\n  beforeDescriptionKey: 'beforeDescription2',\n  beforeImageAltKey: 'beforeImageAlt2',\n  beforeImage: 'https://placehold.co/600x400/A0AEC0/FFFFFF?text=Water+Damage&font=roboto',\n  afterTitleKey: 'afterTitle',\n  afterDescriptionKey: 'afterDescription2',\n  afterImageAltKey: 'afterImageAlt2',\n  afterImage: 'https://placehold.co/600x400/A0E8FF/FFFFFF?text=Contacts+Restored!&font=roboto'\n}, {\n  id: 'ba3',\n  beforeTitleKey: 'beforeTitle',\n  beforeDescriptionKey: 'beforeDescription1',\n  beforeImageAltKey: 'beforeImageAlt1',\n  beforeImage: 'https://placehold.co/600x400/F56565/FFFFFF?text=No+Power&font=roboto',\n  afterTitleKey: 'afterTitle',\n  afterDescriptionKey: 'afterDescription1',\n  afterImageAltKey: 'afterImageAlt1',\n  afterImage: 'https://placehold.co/600x400/9AE6B4/FFFFFF?text=Bootloop+Fixed,+Data+Safe!&font=roboto'\n}];\nconst api = {\n  processPayment: async ({\n    amount,\n    paymentMethodType,\n    paymentDetails\n  }) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/payments/process`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount,\n          paymentMethodType,\n          paymentDetails\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      return {\n        success: false,\n        messageKey: 'paymentFailedText'\n      };\n    }\n  },\n  submitRequest: async requestData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/requests`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          customerName: requestData.fullName,\n          phoneNumber: requestData.fullPhoneNumber,\n          email: requestData.email,\n          phoneModel: requestData.phoneModel,\n          issueDescription: requestData.issueDescription,\n          paymentMethod: requestData.paymentMethod,\n          transactionId: requestData.transactionId,\n          city: requestData.city,\n          region: requestData.region,\n          previouslyRepaired: requestData.previouslyRepaired,\n          deviceCondition: requestData.deviceCondition,\n          deviceImageName: requestData.deviceImageName\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Request submission error:', error);\n      throw new Error(\"Failed to submit request.\");\n    }\n  },\n  checkStatus: async (requestId, verificationCode) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/requests/check-status?requestId=${requestId}&verificationCode=${verificationCode}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Status check error:', error);\n      return {\n        status: 'error',\n        message: 'Failed to check status.'\n      };\n    }\n  },\n  checkStatusByPhone: async (phoneNumber, verificationCode) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/requests/check-status-by-phone?phoneNumber=${phoneNumber}&verificationCode=${verificationCode}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Status check by phone error:', error);\n      return {\n        status: 'error',\n        message: 'Failed to check status.'\n      };\n    }\n  },\n  sendVerificationCode: async phoneNumber => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/requests/send-verification-code?phoneNumber=${encodeURIComponent(phoneNumber)}`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Failed to send verification code');\n      }\n      return data.verificationCode;\n    } catch (error) {\n      console.error('Verification code sending error:', error);\n      throw new Error('Failed to send verification code');\n    }\n  },\n  sendRequestIdVerificationCode: async requestId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/requests/send-request-verification-code?requestId=${encodeURIComponent(requestId)}`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Failed to send verification code');\n      }\n      return data.verificationCode;\n    } catch (error) {\n      console.error('Verification code sending error:', error);\n      throw new Error('Failed to send verification code');\n    }\n  },\n  getRequests: async (page = 0, size = 10, searchTerm = '', statusFilter = 'all') => {\n    try {\n      const queryParams = new URLSearchParams({\n        page: page.toString(),\n        size: size.toString(),\n        ...(searchTerm && {\n          searchTerm\n        }),\n        statusFilter\n      });\n      const response = await fetch(`${API_BASE_URL}/requests?${queryParams}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Get requests error:', error);\n      return {\n        requests: [],\n        currentPage: 0,\n        totalPages: 0,\n        totalItems: 0\n      };\n    }\n  },\n  updateStatus: async (requestId, newStatus) => {\n    try {\n      const formattedStatus = newStatus.toUpperCase().replace(/-/g, '_');\n      const response = await fetch(`${API_BASE_URL}/requests/${requestId}/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status: formattedStatus\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Failed to update status');\n      }\n      return data;\n    } catch (error) {\n      console.error('Status update error:', error);\n      return {\n        success: false,\n        message: error.message || 'Failed to update status.'\n      };\n    }\n  },\n  loginAdmin: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login?username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`, {\n        method: 'POST'\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: 'Failed to login.'\n      };\n    }\n  },\n  // Testimonial endpoints\n  getTestimonials: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/testimonials`);\n      const data = await response.json();\n      return data.testimonials || MOCK_TESTIMONIALS;\n    } catch (error) {\n      console.error('Get testimonials error:', error);\n      return MOCK_TESTIMONIALS;\n    }\n  },\n  getTestimonialById: async id => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/testimonials/${id}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Get testimonial error:', error);\n      throw new Error('Failed to get testimonial');\n    }\n  },\n  createTestimonial: async testimonialData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/testimonials`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(testimonialData)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Create testimonial error:', error);\n      throw new Error('Failed to create testimonial');\n    }\n  },\n  updateTestimonial: async (id, testimonialData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/testimonials/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(testimonialData)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Update testimonial error:', error);\n      throw new Error('Failed to update testimonial');\n    }\n  },\n  deleteTestimonial: async id => {\n    try {\n      await fetch(`${API_BASE_URL}/testimonials/${id}`, {\n        method: 'DELETE'\n      });\n      return true;\n    } catch (error) {\n      console.error('Delete testimonial error:', error);\n      throw new Error('Failed to delete testimonial');\n    }\n  },\n  // Before/After endpoints\n  getBeforeAfterCases: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/before-after`);\n      const data = await response.json();\n      return data.cases || MOCK_BEFORE_AFTER_CASES;\n    } catch (error) {\n      console.error('Get before/after cases error:', error);\n      return MOCK_BEFORE_AFTER_CASES;\n    }\n  },\n  getBeforeAfterCaseById: async id => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/before-after/${id}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Get before/after case error:', error);\n      throw new Error('Failed to get before/after case');\n    }\n  },\n  createBeforeAfterCase: async caseData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/before-after`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(caseData)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Create before/after case error:', error);\n      throw new Error('Failed to create before/after case');\n    }\n  },\n  updateBeforeAfterCase: async (id, caseData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/before-after/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(caseData)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Update before/after case error:', error);\n      throw new Error('Failed to update before/after case');\n    }\n  },\n  deleteBeforeAfterCase: async id => {\n    try {\n      await fetch(`${API_BASE_URL}/before-after/${id}`, {\n        method: 'DELETE'\n      });\n      return true;\n    } catch (error) {\n      console.error('Delete before/after case error:', error);\n      throw new Error('Failed to delete before/after case');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_BASE_URL","MOCK_TESTIMONIALS","id","nameKey","deviceKey","quoteKey","avatar","rating","MOCK_BEFORE_AFTER_CASES","beforeTitleKey","beforeDescriptionKey","beforeImageAltKey","beforeImage","afterTitleKey","afterDescriptionKey","afterImageAltKey","afterImage","api","processPayment","amount","paymentMethodType","paymentDetails","response","fetch","method","headers","body","JSON","stringify","json","error","console","success","messageKey","submitRequest","requestData","customerName","fullName","phoneNumber","fullPhoneNumber","email","phoneModel","issueDescription","paymentMethod","transactionId","city","region","previouslyRepaired","deviceCondition","deviceImageName","Error","checkStatus","requestId","verificationCode","status","message","checkStatusByPhone","sendVerificationCode","encodeURIComponent","data","sendRequestIdVerificationCode","getRequests","page","size","searchTerm","statusFilter","queryParams","URLSearchParams","toString","requests","currentPage","totalPages","totalItems","updateStatus","newStatus","formattedStatus","toUpperCase","replace","loginAdmin","username","password","getTestimonials","testimonials","getTestimonialById","createTestimonial","testimonialData","updateTestimonial","deleteTestimonial","getBeforeAfterCases","cases","getBeforeAfterCaseById","createBeforeAfterCase","caseData","updateBeforeAfterCase","deleteBeforeAfterCase"],"sources":["/Users/almiskea/ipro/saytech-frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:8080/api';\n\n// Mock data for development\nconst MOCK_TESTIMONIALS = [\n    {\n        id: 1,\n        nameKey: 'testimonial1Name',\n        deviceKey: 'testimonial1Device',\n        quoteKey: 'testimonial1Quote',\n        avatar: 'https://placehold.co/100x100/3B82F6/FFFFFF?text=User1',\n        rating: 5\n    },\n    {\n        id: 2,\n        nameKey: 'testimonial2Name',\n        deviceKey: 'testimonial2Device',\n        quoteKey: 'testimonial2Quote',\n        avatar: 'https://placehold.co/100x100/3B82F6/FFFFFF?text=User2',\n        rating: 5\n    },\n    {\n        id: 3,\n        nameKey: 'testimonial3Name',\n        deviceKey: 'testimonial3Device',\n        quoteKey: 'testimonial3Quote',\n        avatar: 'https://placehold.co/100x100/3B82F6/FFFFFF?text=User3',\n        rating: 5\n    }\n];\n\nconst MOCK_BEFORE_AFTER_CASES = [\n    { id: 'ba1', beforeTitleKey: 'beforeTitle', beforeDescriptionKey: 'beforeDescription1', beforeImageAltKey: 'beforeImageAlt1', beforeImage: 'https://placehold.co/600x400/FF7272/FFFFFF?text=Damaged+Screen&font=roboto', afterTitleKey: 'afterTitle', afterDescriptionKey: 'afterDescription1', afterImageAltKey: 'afterImageAlt1', afterImage: 'https://placehold.co/600x400/72FFB3/FFFFFF?text=Screen+Data+Recovered!&font=roboto' },\n    { id: 'ba2', beforeTitleKey: 'beforeTitle', beforeDescriptionKey: 'beforeDescription2', beforeImageAltKey: 'beforeImageAlt2', beforeImage: 'https://placehold.co/600x400/A0AEC0/FFFFFF?text=Water+Damage&font=roboto', afterTitleKey: 'afterTitle', afterDescriptionKey: 'afterDescription2', afterImageAltKey: 'afterImageAlt2', afterImage: 'https://placehold.co/600x400/A0E8FF/FFFFFF?text=Contacts+Restored!&font=roboto' },\n    { id: 'ba3', beforeTitleKey: 'beforeTitle', beforeDescriptionKey: 'beforeDescription1', beforeImageAltKey: 'beforeImageAlt1', beforeImage: 'https://placehold.co/600x400/F56565/FFFFFF?text=No+Power&font=roboto', afterTitleKey: 'afterTitle', afterDescriptionKey: 'afterDescription1', afterImageAltKey: 'afterImageAlt1', afterImage: 'https://placehold.co/600x400/9AE6B4/FFFFFF?text=Bootloop+Fixed,+Data+Safe!&font=roboto' },\n];\n\nconst api = {\n    processPayment: async ({ amount, paymentMethodType, paymentDetails }) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/payments/process`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ amount, paymentMethodType, paymentDetails }),\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Payment processing error:', error);\n            return { success: false, messageKey: 'paymentFailedText' };\n        }\n    },\n\n    submitRequest: async (requestData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/requests`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    customerName: requestData.fullName,\n                    phoneNumber: requestData.fullPhoneNumber,\n                    email: requestData.email,\n                    phoneModel: requestData.phoneModel,\n                    issueDescription: requestData.issueDescription,\n                    paymentMethod: requestData.paymentMethod,\n                    transactionId: requestData.transactionId,\n                    city: requestData.city,\n                    region: requestData.region,\n                    previouslyRepaired: requestData.previouslyRepaired,\n                    deviceCondition: requestData.deviceCondition,\n                    deviceImageName: requestData.deviceImageName\n                }),\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Request submission error:', error);\n            throw new Error(\"Failed to submit request.\");\n        }\n    },\n\n    checkStatus: async (requestId, verificationCode) => {\n        try {\n            const response = await fetch(\n                `${API_BASE_URL}/requests/check-status?requestId=${requestId}&verificationCode=${verificationCode}`\n            );\n            return await response.json();\n        } catch (error) {\n            console.error('Status check error:', error);\n            return { status: 'error', message: 'Failed to check status.' };\n        }\n    },\n\n    checkStatusByPhone: async (phoneNumber, verificationCode) => {\n        try {\n            const response = await fetch(\n                `${API_BASE_URL}/requests/check-status-by-phone?phoneNumber=${phoneNumber}&verificationCode=${verificationCode}`\n            );\n            return await response.json();\n        } catch (error) {\n            console.error('Status check by phone error:', error);\n            return { status: 'error', message: 'Failed to check status.' };\n        }\n    },\n\n    sendVerificationCode: async (phoneNumber) => {\n        try {\n            const response = await fetch(\n                `${API_BASE_URL}/requests/send-verification-code?phoneNumber=${encodeURIComponent(phoneNumber)}`,\n                {\n                    method: 'POST',\n                }\n            );\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.message || 'Failed to send verification code');\n            }\n            return data.verificationCode;\n        } catch (error) {\n            console.error('Verification code sending error:', error);\n            throw new Error('Failed to send verification code');\n        }\n    },\n\n    sendRequestIdVerificationCode: async (requestId) => {\n        try {\n            const response = await fetch(\n                `${API_BASE_URL}/requests/send-request-verification-code?requestId=${encodeURIComponent(requestId)}`,\n                {\n                    method: 'POST',\n                }\n            );\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.message || 'Failed to send verification code');\n            }\n            return data.verificationCode;\n        } catch (error) {\n            console.error('Verification code sending error:', error);\n            throw new Error('Failed to send verification code');\n        }\n    },\n\n    getRequests: async (page = 0, size = 10, searchTerm = '', statusFilter = 'all') => {\n        try {\n            const queryParams = new URLSearchParams({\n                page: page.toString(),\n                size: size.toString(),\n                ...(searchTerm && { searchTerm }),\n                statusFilter\n            });\n            const response = await fetch(`${API_BASE_URL}/requests?${queryParams}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Get requests error:', error);\n            return { requests: [], currentPage: 0, totalPages: 0, totalItems: 0 };\n        }\n    },\n\n    updateStatus: async (requestId, newStatus) => {\n        try {\n            const formattedStatus = newStatus.toUpperCase().replace(/-/g, '_');\n            const response = await fetch(`${API_BASE_URL}/requests/${requestId}/status`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ status: formattedStatus }),\n            });\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.message || 'Failed to update status');\n            }\n            return data;\n        } catch (error) {\n            console.error('Status update error:', error);\n            return { success: false, message: error.message || 'Failed to update status.' };\n        }\n    },\n\n    loginAdmin: async (username, password) => {\n        try {\n            const response = await fetch(\n                `${API_BASE_URL}/auth/login?username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`,\n                {\n                    method: 'POST',\n                }\n            );\n            return await response.json();\n        } catch (error) {\n            console.error('Login error:', error);\n            return { success: false, message: 'Failed to login.' };\n        }\n    },\n\n    // Testimonial endpoints\n    getTestimonials: async () => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/testimonials`);\n            const data = await response.json();\n            return data.testimonials || MOCK_TESTIMONIALS;\n        } catch (error) {\n            console.error('Get testimonials error:', error);\n            return MOCK_TESTIMONIALS;\n        }\n    },\n\n    getTestimonialById: async (id) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/testimonials/${id}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Get testimonial error:', error);\n            throw new Error('Failed to get testimonial');\n        }\n    },\n\n    createTestimonial: async (testimonialData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/testimonials`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(testimonialData),\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Create testimonial error:', error);\n            throw new Error('Failed to create testimonial');\n        }\n    },\n\n    updateTestimonial: async (id, testimonialData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/testimonials/${id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(testimonialData),\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Update testimonial error:', error);\n            throw new Error('Failed to update testimonial');\n        }\n    },\n\n    deleteTestimonial: async (id) => {\n        try {\n            await fetch(`${API_BASE_URL}/testimonials/${id}`, {\n                method: 'DELETE',\n            });\n            return true;\n        } catch (error) {\n            console.error('Delete testimonial error:', error);\n            throw new Error('Failed to delete testimonial');\n        }\n    },\n\n    // Before/After endpoints\n    getBeforeAfterCases: async () => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/before-after`);\n            const data = await response.json();\n            return data.cases || MOCK_BEFORE_AFTER_CASES;\n        } catch (error) {\n            console.error('Get before/after cases error:', error);\n            return MOCK_BEFORE_AFTER_CASES;\n        }\n    },\n\n    getBeforeAfterCaseById: async (id) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/before-after/${id}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Get before/after case error:', error);\n            throw new Error('Failed to get before/after case');\n        }\n    },\n\n    createBeforeAfterCase: async (caseData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/before-after`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(caseData),\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Create before/after case error:', error);\n            throw new Error('Failed to create before/after case');\n        }\n    },\n\n    updateBeforeAfterCase: async (id, caseData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/before-after/${id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(caseData),\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Update before/after case error:', error);\n            throw new Error('Failed to update before/after case');\n        }\n    },\n\n    deleteBeforeAfterCase: async (id) => {\n        try {\n            await fetch(`${API_BASE_URL}/before-after/${id}`, {\n                method: 'DELETE',\n            });\n            return true;\n        } catch (error) {\n            console.error('Delete before/after case error:', error);\n            throw new Error('Failed to delete before/after case');\n        }\n    },\n};\n\nexport default api; "],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,2BAA2B;;AAElF;AACA,MAAMC,iBAAiB,GAAG,CACtB;EACIC,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,kBAAkB;EAC3BC,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE,mBAAmB;EAC7BC,MAAM,EAAE,uDAAuD;EAC/DC,MAAM,EAAE;AACZ,CAAC,EACD;EACIL,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,kBAAkB;EAC3BC,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE,mBAAmB;EAC7BC,MAAM,EAAE,uDAAuD;EAC/DC,MAAM,EAAE;AACZ,CAAC,EACD;EACIL,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,kBAAkB;EAC3BC,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE,mBAAmB;EAC7BC,MAAM,EAAE,uDAAuD;EAC/DC,MAAM,EAAE;AACZ,CAAC,CACJ;AAED,MAAMC,uBAAuB,GAAG,CAC5B;EAAEN,EAAE,EAAE,KAAK;EAAEO,cAAc,EAAE,aAAa;EAAEC,oBAAoB,EAAE,oBAAoB;EAAEC,iBAAiB,EAAE,iBAAiB;EAAEC,WAAW,EAAE,4EAA4E;EAAEC,aAAa,EAAE,YAAY;EAAEC,mBAAmB,EAAE,mBAAmB;EAAEC,gBAAgB,EAAE,gBAAgB;EAAEC,UAAU,EAAE;AAAqF,CAAC,EACta;EAAEd,EAAE,EAAE,KAAK;EAAEO,cAAc,EAAE,aAAa;EAAEC,oBAAoB,EAAE,oBAAoB;EAAEC,iBAAiB,EAAE,iBAAiB;EAAEC,WAAW,EAAE,0EAA0E;EAAEC,aAAa,EAAE,YAAY;EAAEC,mBAAmB,EAAE,mBAAmB;EAAEC,gBAAgB,EAAE,gBAAgB;EAAEC,UAAU,EAAE;AAAiF,CAAC,EACha;EAAEd,EAAE,EAAE,KAAK;EAAEO,cAAc,EAAE,aAAa;EAAEC,oBAAoB,EAAE,oBAAoB;EAAEC,iBAAiB,EAAE,iBAAiB;EAAEC,WAAW,EAAE,sEAAsE;EAAEC,aAAa,EAAE,YAAY;EAAEC,mBAAmB,EAAE,mBAAmB;EAAEC,gBAAgB,EAAE,gBAAgB;EAAEC,UAAU,EAAE;AAAyF,CAAC,CACva;AAED,MAAMC,GAAG,GAAG;EACRC,cAAc,EAAE,MAAAA,CAAO;IAAEC,MAAM;IAAEC,iBAAiB;IAAEC;EAAe,CAAC,KAAK;IACrE,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,mBAAmB,EAAE;QAC7D2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,MAAM;UAAEC,iBAAiB;UAAEC;QAAe,CAAC;MACtE,CAAC,CAAC;MACF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAoB,CAAC;IAC9D;EACJ,CAAC;EAEDC,aAAa,EAAE,MAAOC,WAAW,IAAK;IAClC,IAAI;MACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,WAAW,EAAE;QACrD2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBQ,YAAY,EAAED,WAAW,CAACE,QAAQ;UAClCC,WAAW,EAAEH,WAAW,CAACI,eAAe;UACxCC,KAAK,EAAEL,WAAW,CAACK,KAAK;UACxBC,UAAU,EAAEN,WAAW,CAACM,UAAU;UAClCC,gBAAgB,EAAEP,WAAW,CAACO,gBAAgB;UAC9CC,aAAa,EAAER,WAAW,CAACQ,aAAa;UACxCC,aAAa,EAAET,WAAW,CAACS,aAAa;UACxCC,IAAI,EAAEV,WAAW,CAACU,IAAI;UACtBC,MAAM,EAAEX,WAAW,CAACW,MAAM;UAC1BC,kBAAkB,EAAEZ,WAAW,CAACY,kBAAkB;UAClDC,eAAe,EAAEb,WAAW,CAACa,eAAe;UAC5CC,eAAe,EAAEd,WAAW,CAACc;QACjC,CAAC;MACL,CAAC,CAAC;MACF,OAAO,MAAM3B,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIoB,KAAK,CAAC,2BAA2B,CAAC;IAChD;EACJ,CAAC;EAEDC,WAAW,EAAE,MAAAA,CAAOC,SAAS,EAAEC,gBAAgB,KAAK;IAChD,IAAI;MACA,MAAM/B,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAG1B,YAAY,oCAAoCuD,SAAS,qBAAqBC,gBAAgB,EACrG,CAAC;MACD,OAAO,MAAM/B,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO;QAAEwB,MAAM,EAAE,OAAO;QAAEC,OAAO,EAAE;MAA0B,CAAC;IAClE;EACJ,CAAC;EAEDC,kBAAkB,EAAE,MAAAA,CAAOlB,WAAW,EAAEe,gBAAgB,KAAK;IACzD,IAAI;MACA,MAAM/B,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAG1B,YAAY,+CAA+CyC,WAAW,qBAAqBe,gBAAgB,EAClH,CAAC;MACD,OAAO,MAAM/B,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO;QAAEwB,MAAM,EAAE,OAAO;QAAEC,OAAO,EAAE;MAA0B,CAAC;IAClE;EACJ,CAAC;EAEDE,oBAAoB,EAAE,MAAOnB,WAAW,IAAK;IACzC,IAAI;MACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAG1B,YAAY,gDAAgD6D,kBAAkB,CAACpB,WAAW,CAAC,EAAE,EAChG;QACId,MAAM,EAAE;MACZ,CACJ,CAAC;MACD,MAAMmC,IAAI,GAAG,MAAMrC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAAC8B,IAAI,CAAC3B,OAAO,EAAE;QACf,MAAM,IAAIkB,KAAK,CAACS,IAAI,CAACJ,OAAO,IAAI,kCAAkC,CAAC;MACvE;MACA,OAAOI,IAAI,CAACN,gBAAgB;IAChC,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM,IAAIoB,KAAK,CAAC,kCAAkC,CAAC;IACvD;EACJ,CAAC;EAEDU,6BAA6B,EAAE,MAAOR,SAAS,IAAK;IAChD,IAAI;MACA,MAAM9B,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAG1B,YAAY,sDAAsD6D,kBAAkB,CAACN,SAAS,CAAC,EAAE,EACpG;QACI5B,MAAM,EAAE;MACZ,CACJ,CAAC;MACD,MAAMmC,IAAI,GAAG,MAAMrC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAAC8B,IAAI,CAAC3B,OAAO,EAAE;QACf,MAAM,IAAIkB,KAAK,CAACS,IAAI,CAACJ,OAAO,IAAI,kCAAkC,CAAC;MACvE;MACA,OAAOI,IAAI,CAACN,gBAAgB;IAChC,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM,IAAIoB,KAAK,CAAC,kCAAkC,CAAC;IACvD;EACJ,CAAC;EAEDW,WAAW,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,EAAE,EAAEC,UAAU,GAAG,EAAE,EAAEC,YAAY,GAAG,KAAK,KAAK;IAC/E,IAAI;MACA,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC;QACpCL,IAAI,EAAEA,IAAI,CAACM,QAAQ,CAAC,CAAC;QACrBL,IAAI,EAAEA,IAAI,CAACK,QAAQ,CAAC,CAAC;QACrB,IAAIJ,UAAU,IAAI;UAAEA;QAAW,CAAC,CAAC;QACjCC;MACJ,CAAC,CAAC;MACF,MAAM3C,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,aAAaqE,WAAW,EAAE,CAAC;MACvE,OAAO,MAAM5C,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO;QAAEuC,QAAQ,EAAE,EAAE;QAAEC,WAAW,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAE,CAAC;IACzE;EACJ,CAAC;EAEDC,YAAY,EAAE,MAAAA,CAAOrB,SAAS,EAAEsB,SAAS,KAAK;IAC1C,IAAI;MACA,MAAMC,eAAe,GAAGD,SAAS,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;MAClE,MAAMvD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,aAAauD,SAAS,SAAS,EAAE;QACzE5B,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE0B,MAAM,EAAEqB;QAAgB,CAAC;MACpD,CAAC,CAAC;MACF,MAAMhB,IAAI,GAAG,MAAMrC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,IAAI,CAAC8B,IAAI,CAAC3B,OAAO,EAAE;QACf,MAAM,IAAIkB,KAAK,CAACS,IAAI,CAACJ,OAAO,IAAI,yBAAyB,CAAC;MAC9D;MACA,OAAOI,IAAI;IACf,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEuB,OAAO,EAAEzB,KAAK,CAACyB,OAAO,IAAI;MAA2B,CAAC;IACnF;EACJ,CAAC;EAEDuB,UAAU,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACtC,IAAI;MACA,MAAM1D,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAG1B,YAAY,wBAAwB6D,kBAAkB,CAACqB,QAAQ,CAAC,aAAarB,kBAAkB,CAACsB,QAAQ,CAAC,EAAE,EAC9G;QACIxD,MAAM,EAAE;MACZ,CACJ,CAAC;MACD,OAAO,MAAMF,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEuB,OAAO,EAAE;MAAmB,CAAC;IAC1D;EACJ,CAAC;EAED;EACA0B,eAAe,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACA,MAAM3D,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,eAAe,CAAC;MAC5D,MAAM8D,IAAI,GAAG,MAAMrC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAO8B,IAAI,CAACuB,YAAY,IAAIjF,iBAAiB;IACjD,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO7B,iBAAiB;IAC5B;EACJ,CAAC;EAEDkF,kBAAkB,EAAE,MAAOjF,EAAE,IAAK;IAC9B,IAAI;MACA,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,iBAAiBK,EAAE,EAAE,CAAC;MAClE,OAAO,MAAMoB,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIoB,KAAK,CAAC,2BAA2B,CAAC;IAChD;EACJ,CAAC;EAEDkC,iBAAiB,EAAE,MAAOC,eAAe,IAAK;IAC1C,IAAI;MACA,MAAM/D,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,eAAe,EAAE;QACzD2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACyD,eAAe;MACxC,CAAC,CAAC;MACF,OAAO,MAAM/D,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIoB,KAAK,CAAC,8BAA8B,CAAC;IACnD;EACJ,CAAC;EAEDoC,iBAAiB,EAAE,MAAAA,CAAOpF,EAAE,EAAEmF,eAAe,KAAK;IAC9C,IAAI;MACA,MAAM/D,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,iBAAiBK,EAAE,EAAE,EAAE;QAC/DsB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACyD,eAAe;MACxC,CAAC,CAAC;MACF,OAAO,MAAM/D,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIoB,KAAK,CAAC,8BAA8B,CAAC;IACnD;EACJ,CAAC;EAEDqC,iBAAiB,EAAE,MAAOrF,EAAE,IAAK;IAC7B,IAAI;MACA,MAAMqB,KAAK,CAAC,GAAG1B,YAAY,iBAAiBK,EAAE,EAAE,EAAE;QAC9CsB,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,OAAO,IAAI;IACf,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIoB,KAAK,CAAC,8BAA8B,CAAC;IACnD;EACJ,CAAC;EAED;EACAsC,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMlE,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,eAAe,CAAC;MAC5D,MAAM8D,IAAI,GAAG,MAAMrC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAO8B,IAAI,CAAC8B,KAAK,IAAIjF,uBAAuB;IAChD,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAOtB,uBAAuB;IAClC;EACJ,CAAC;EAEDkF,sBAAsB,EAAE,MAAOxF,EAAE,IAAK;IAClC,IAAI;MACA,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,iBAAiBK,EAAE,EAAE,CAAC;MAClE,OAAO,MAAMoB,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIoB,KAAK,CAAC,iCAAiC,CAAC;IACtD;EACJ,CAAC;EAEDyC,qBAAqB,EAAE,MAAOC,QAAQ,IAAK;IACvC,IAAI;MACA,MAAMtE,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,eAAe,EAAE;QACzD2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgE,QAAQ;MACjC,CAAC,CAAC;MACF,OAAO,MAAMtE,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIoB,KAAK,CAAC,oCAAoC,CAAC;IACzD;EACJ,CAAC;EAED2C,qBAAqB,EAAE,MAAAA,CAAO3F,EAAE,EAAE0F,QAAQ,KAAK;IAC3C,IAAI;MACA,MAAMtE,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,iBAAiBK,EAAE,EAAE,EAAE;QAC/DsB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgE,QAAQ;MACjC,CAAC,CAAC;MACF,OAAO,MAAMtE,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIoB,KAAK,CAAC,oCAAoC,CAAC;IACzD;EACJ,CAAC;EAED4C,qBAAqB,EAAE,MAAO5F,EAAE,IAAK;IACjC,IAAI;MACA,MAAMqB,KAAK,CAAC,GAAG1B,YAAY,iBAAiBK,EAAE,EAAE,EAAE;QAC9CsB,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,OAAO,IAAI;IACf,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIoB,KAAK,CAAC,oCAAoC,CAAC;IACzD;EACJ;AACJ,CAAC;AAED,eAAejC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}