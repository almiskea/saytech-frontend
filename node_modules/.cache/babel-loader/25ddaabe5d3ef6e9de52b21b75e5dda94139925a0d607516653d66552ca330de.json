{"ast":null,"code":"const api = {\n  // Updated function to initiate payment and receive HTML for the popup\n  initiatePayFortPayment: async ({\n    email,\n    amount\n  }) => {\n    // The callback URL for the popup to redirect to after payment\n    const returnUrl = `${window.location.origin}/payment-callback`;\n    const response = await fetch('http://localhost:8080/api/payment/initiate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // The backend needs to handle 'return_url' to configure PayFort correctly\n      body: JSON.stringify({\n        email,\n        amount,\n        return_url: returnUrl\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        message: 'Failed to initiate payment'\n      }));\n      throw new Error(errorData.message || 'Payment initiation failed');\n    }\n\n    // Expecting the raw HTML for the payment form\n    return response.text();\n  },\n  submitRequest: async requestData => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(\"Submitting service request to backend:\", requestData);\n    return {\n      requestId: requestData.fortId,\n      transactionId: requestData.transactionId\n    };\n  },\n  checkStatusByNamePhoneEmail: async (fullName, phoneNumber, email) => {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    const mockRequests = [{\n      requestId: 'REQ-ABC123',\n      customerName: 'Ahmed Al-Mansoori',\n      phoneNumber: '+966501234567',\n      email: 'ahmed@example.com',\n      phoneInfo: 'iPhone 13 Pro',\n      status: 'evaluating_device',\n      issue: 'Water damage',\n      paymentInfo: 'PayFort',\n      transactionId: 'TXN-AMZ-123'\n    }, {\n      requestId: 'REQ-DEF456',\n      customerName: 'Fatima Al-Zahrani',\n      phoneNumber: '+966507654321',\n      email: 'fatima@example.com',\n      phoneInfo: 'iPhone 12',\n      status: 'data_recovered',\n      issue: 'Screen broken',\n      paymentInfo: 'PayFort',\n      transactionId: 'TXN-AMZ-456'\n    }];\n    const foundRequests = mockRequests.filter(req => req.customerName.toLowerCase() === fullName.toLowerCase() && req.phoneNumber === phoneNumber && req.email.toLowerCase() === email.toLowerCase());\n    return foundRequests.length > 0 ? foundRequests : [];\n  },\n  getRequests: async (page = 0, size = 10, searchTerm = '', statusFilter = 'all') => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const mockRequests = [{\n      requestId: 'REQ-ABC123',\n      customerName: 'Ahmed Ali',\n      phoneNumber: '+966501234567',\n      phoneInfo: 'iPhone 13 Pro',\n      status: 'evaluating_device',\n      email: 'ahmed@example.com',\n      issue: 'Water damage',\n      paymentInfo: 'PayFort',\n      transactionId: 'TXN-AMZ-123'\n    }, {\n      requestId: 'REQ-DEF456',\n      customerName: 'Fatima Hassan',\n      phoneNumber: '+966507654321',\n      phoneInfo: 'iPhone 12',\n      status: 'data_recovered',\n      email: 'fatima@example.com',\n      issue: 'Screen broken',\n      paymentInfo: 'PayFort',\n      transactionId: 'TXN-AMZ-456'\n    }, {\n      requestId: 'REQ-GHI789',\n      customerName: 'Omar Khaled',\n      phoneNumber: '+966509876543',\n      phoneInfo: 'iPhone 11',\n      status: 'pending',\n      email: 'omar@example.com',\n      issue: 'Not turning on',\n      paymentInfo: 'N/A',\n      transactionId: 'N/A'\n    }];\n    return {\n      requests: mockRequests,\n      currentPage: page,\n      totalPages: 1,\n      totalItems: mockRequests.length\n    };\n  },\n  updateStatus: async (requestId, newStatus) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true\n    };\n  },\n  loginAdmin: async (username, password) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return username === 'admin' && password === 'admin123' ? {\n      success: true,\n      token: 'mock-admin-token'\n    } : {\n      success: false,\n      message: 'Invalid credentials'\n    };\n  },\n  getTestimonials: async () => {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return MOCK_TESTIMONIALS;\n  },\n  getBeforeAfterCases: async () => {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return MOCK_BEFORE_AFTER_CASES;\n  }\n};\nexport default api;","map":{"version":3,"names":["api","initiatePayFortPayment","email","amount","returnUrl","window","location","origin","response","fetch","method","headers","body","JSON","stringify","return_url","ok","errorData","json","catch","message","Error","text","submitRequest","requestData","Promise","resolve","setTimeout","console","log","requestId","fortId","transactionId","checkStatusByNamePhoneEmail","fullName","phoneNumber","mockRequests","customerName","phoneInfo","status","issue","paymentInfo","foundRequests","filter","req","toLowerCase","length","getRequests","page","size","searchTerm","statusFilter","requests","currentPage","totalPages","totalItems","updateStatus","newStatus","success","loginAdmin","username","password","token","getTestimonials","MOCK_TESTIMONIALS","getBeforeAfterCases","MOCK_BEFORE_AFTER_CASES"],"sources":["/Users/almiskea/ipro/saytech-frontend/src/services/api.js"],"sourcesContent":["const api = {\n    // Updated function to initiate payment and receive HTML for the popup\n    initiatePayFortPayment: async ({ email, amount }) => {\n        // The callback URL for the popup to redirect to after payment\n        const returnUrl = `${window.location.origin}/payment-callback`;\n\n        const response = await fetch('http://localhost:8080/api/payment/initiate', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            // The backend needs to handle 'return_url' to configure PayFort correctly\n            body: JSON.stringify({ email, amount, return_url: returnUrl }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ message: 'Failed to initiate payment' }));\n            throw new Error(errorData.message || 'Payment initiation failed');\n        }\n        \n        // Expecting the raw HTML for the payment form\n        return response.text(); \n    },\n    \n    submitRequest: async (requestData) => {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        console.log(\"Submitting service request to backend:\", requestData);\n        return {\n            requestId: requestData.fortId,\n            transactionId: requestData.transactionId\n        };\n    },\n    \n    checkStatusByNamePhoneEmail: async (fullName, phoneNumber, email) => {\n        await new Promise(resolve => setTimeout(resolve, 800));\n        const mockRequests = [\n            { requestId: 'REQ-ABC123', customerName: 'Ahmed Al-Mansoori', phoneNumber: '+966501234567', email: 'ahmed@example.com', phoneInfo: 'iPhone 13 Pro', status: 'evaluating_device', issue: 'Water damage', paymentInfo: 'PayFort', transactionId: 'TXN-AMZ-123' },\n            { requestId: 'REQ-DEF456', customerName: 'Fatima Al-Zahrani', phoneNumber: '+966507654321', email: 'fatima@example.com', phoneInfo: 'iPhone 12', status: 'data_recovered', issue: 'Screen broken', paymentInfo: 'PayFort', transactionId: 'TXN-AMZ-456' },\n        ];\n        const foundRequests = mockRequests.filter(req => \n            req.customerName.toLowerCase() === fullName.toLowerCase() &&\n            req.phoneNumber === phoneNumber &&\n            req.email.toLowerCase() === email.toLowerCase()\n        );\n        return foundRequests.length > 0 ? foundRequests : [];\n    },\n\n    getRequests: async (page = 0, size = 10, searchTerm = '', statusFilter = 'all') => {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const mockRequests = [\n            { requestId: 'REQ-ABC123', customerName: 'Ahmed Ali', phoneNumber: '+966501234567', phoneInfo: 'iPhone 13 Pro', status: 'evaluating_device', email: 'ahmed@example.com', issue: 'Water damage', paymentInfo: 'PayFort', transactionId: 'TXN-AMZ-123' },\n            { requestId: 'REQ-DEF456', customerName: 'Fatima Hassan', phoneNumber: '+966507654321', phoneInfo: 'iPhone 12', status: 'data_recovered', email: 'fatima@example.com', issue: 'Screen broken', paymentInfo: 'PayFort', transactionId: 'TXN-AMZ-456' },\n            { requestId: 'REQ-GHI789', customerName: 'Omar Khaled', phoneNumber: '+966509876543', phoneInfo: 'iPhone 11', status: 'pending', email: 'omar@example.com', issue: 'Not turning on', paymentInfo: 'N/A', transactionId: 'N/A' },\n        ];\n        return { requests: mockRequests, currentPage: page, totalPages: 1, totalItems: mockRequests.length };\n    },\n\n    updateStatus: async (requestId, newStatus) => {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return { success: true };\n    },\n\n    loginAdmin: async (username, password) => {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return username === 'admin' && password === 'admin123'\n            ? { success: true, token: 'mock-admin-token' }\n            : { success: false, message: 'Invalid credentials' };\n    },\n\n    getTestimonials: async () => {\n        await new Promise(resolve => setTimeout(resolve, 300));\n        return MOCK_TESTIMONIALS;\n    },\n\n    getBeforeAfterCases: async () => {\n        await new Promise(resolve => setTimeout(resolve, 300));\n        return MOCK_BEFORE_AFTER_CASES;\n    }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}